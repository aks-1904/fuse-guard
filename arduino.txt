#include <WiFi.h>
#include <WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

const int sensorPin = 36; // Analog pin
const int relayPin = 23;  // Relay control
const float overloadThreshold = 10.0; // Amps

LiquidCrystal_I2C lcd(0x27, 16, 2); // I2C address may be 0x3F or 0x27
WebServer server(80);

float readCurrent() {
  int sensorValue = analogRead(sensorPin);
  float voltage = (sensorValue / 4095.0) * 3.3;
  float current = (voltage - 2.5) / 0.185;
  return current;
}

void updateLCD(float current, String status) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Current: ");
  lcd.print(current, 1);
  lcd.print("A");

  lcd.setCursor(0, 1);
  lcd.print("Status: ");
  lcd.print(status);
}

void handleRoot() {
  server.send(200, "text/html", "<h2>ESP32 FuseGuard</h2><p>Go to <a href='/data'>/data</a></p>");
}

void handleData() {
  float current = readCurrent();
  bool isOverload = current > overloadThreshold;
  String status = isOverload ? "Overload" : "Normal";

  String json = "{";
  json += "\"current\":" + String(current, 2) + ",";
  json += "\"status\":\"" + status + "\"";
  json += "}";

  server.send(200, "application/json", json);
  digitalWrite(relayPin, isOverload ? LOW : HIGH);

  updateLCD(current, status);

  // Also print to Serial
  Serial.print("Current: ");
  Serial.print(current, 2);
  Serial.print(" A | Status: ");
  Serial.println(status);
}

void setup() {
  Serial.begin(115200);
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, HIGH);

  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Connecting...");

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("IP: ");
  lcd.setCursor(0, 1);
  lcd.print(WiFi.localIP());

  delay(2000); // Show IP on LCD for demo

  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.begin();
  Serial.println("Server started");
}

void loop() {
  server.handleClient();
}


https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

